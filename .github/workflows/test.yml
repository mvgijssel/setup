name: Test
on: [push]
env:
  GITHUB_DOCKER_REGISTRY_TOKEN: ${{ github.token }}

jobs:
  test-dotfiles:
    name: Test dotfiles
    timeout-minutes: 60
    runs-on: macos-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      # For debugging https://github.com/marketplace/actions/debugging-with-tmate
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.6.0
      with:
        access_token: ${{ github.token }}
    - uses: actions/checkout@v1
    - run: ./scripts/github_load_env.sh .envrc
    - run: env
    - run: |
        export CI_PASSWORD=''
        export BRANCH="$GIT_BRANCH"
        eval "$(cat ./dotfiles/bootstrap.sh)" < <(echo $CI_PASSWORD)
    - run: env
    - working-directory: ${{ env.SETUP_DOTFILES_DIR }}
      run: bundle install
    - working-directory: ${{ env.SETUP_DOTFILES_DIR }}
      run: rake spec

  build-base-image:
    name: Build docker base image
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: docker_build.sh "${BASE_IMAGE}" "./base-image"

  build-image-builder:
    name: Build image builder image
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: build-base-image
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: docker_build.sh "${IMAGE_BUILDER_IMAGE}" ./image-builder

  build-libvirt:
    name: Build libvirt image
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: build-image-builder
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: image_build.sh ./libvirt/image.cfg
    - uses: actions/upload-artifact@v1
      with:
        name: libvirt
        path: ./image

  build-kubernetes:
    name: Build kubernetes image
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: build-image-builder
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: image_build.sh ./kubernetes/image.cfg
    - uses: actions/upload-artifact@v1
      with:
        name: kubernetes
        path: ./image

  build-digital-rebar:
    name: Build digital rebar image
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: build-image-builder
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: image_build.sh ./digital-rebar/image.cfg
    - uses: actions/upload-artifact@v1
      with:
        name: digital-rebar
        path: ./image

  # test-libvirt:
  #   name: Test libvirt
  #   timeout-minutes: 60
  #   runs-on: macos-latest
  #   needs: [build-libvirt, build-kubernetes]
  #   env:
  #     TARGET_DIR: './libvirt'
  #   steps:
  #   - uses: actions/checkout@v1
  #   - run: ./scripts/load_env.sh
  #   - uses: actions/download-artifact@v1
  #     with:
  #       name: libvirt
  #       path: ./image
  #   - uses: actions/download-artifact@v1
  #     with:
  #       name: kubernetes
  #       path: ./image
  #   - run: brew install qemu cdrtools terraform libvirt pkg-config gnu-tar coreutils
  #   - uses: actions/setup-go@v2
  #     with:
  #       go-version: 1.12
  #   - run: ./libvirt/setup_github.sh
  #   - name: Run box_build.sh ./libvirt/image.cfg
  #     uses: nick-invision/retry@v1
  #     with:
  #       timeout_minutes: 10
  #       max_attempts: 2
  #       command: box_build.sh ./libvirt/image.cfg
  #   - name: Run vagrant up libvirt
  #     uses: nick-invision/retry@v1
  #     with:
  #       timeout_minutes: 6
  #       max_attempts: 2
  #       command: cd libvirt && vagrant destroy -f libvirt && vagrant up libvirt
  #   - working-directory: ${{ env.TARGET_DIR }}
  #     run: terraform init
  #   - working-directory: ${{ env.TARGET_DIR }}
  #     run: terraform apply -auto-approve
  #   - uses: actions/upload-artifact@v1
  #     if: ${{ always() }}
  #     with:
  #       name: test-libvirt-log
  #       path: ./log

  macos-info:
    name: Print macos vm information
    timeout-minutes: 5
    runs-on: macos-latest
    steps:
    - env:
        GITHUB: ${{ toJson(github) }}
        ENV: ${{ toJson(env) }}
        JOB: ${{ toJson(job) }}
        STEPS: ${{ toJson(steps) }}
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        STRATEGY: ${{ toJson(strategy) }}
        MATRIX: ${{ toJson(matrix) }}
      run: |
        env
    - uses: actions/checkout@v1
    - run: ls -la
    - run: ifconfig
    - run: id
    - run: VBoxManage list bridgedifs | grep ^Name
    - run: vboxmanage --version
    - run: sudo pfctl -s all
    - run: sysctl -a

  # test-kubernetes:
  #   name: Test kubernetes image
  #   timeout-minutes: 20
  #   runs-on: macos-latest
  #   needs: build-kubernetes
  #   steps:
  #   - uses: actions/checkout@v1
  #   - run: chmod 0400 scripts/keys/id_rsa
  #   - run: ./scripts/load_env.sh
  #   - run: brew install qemu cdrtools hivemind hyperkit ansible
  #   - uses: actions/download-artifact@v1
  #     with:
  #       name: kubernetes
  #       path: ./kubernetes/images/kubernetes
  #   - uses: actions/setup-ruby@v1
  #     with:
  #       ruby-version: '2.6'
  #   - run: gem install bundler:2.1.4
  #   - run: cd kubernetes && bundle install
  #   - run: |
  #       cd ./kubernetes
  #       hivemind Procfile.tests &
  #       bundle exec rspec

