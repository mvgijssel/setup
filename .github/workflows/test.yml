name: Test
on: [push]
env:
  CI: true
  REGISTRY_GITHUB_TOKEN: ${{ github.token }}
  RUN_ID: ${{ github.run_id }}

jobs:
  build-ipxe:
    name: Build image builder image
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: ./ipxe/build.sh
    - uses: actions/upload-artifact@v1
      with:
        name: ipxe
        path: ./ipxe/output

  build-base-image:
    name: Build docker base image
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: docker_build.sh "${BASE_IMAGE}" "./base-image"

  build-image-builder:
    name: Build image builder image
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build-base-image
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: docker_build.sh "${IMAGE_BUILDER_IMAGE}" "./image-builder"

  build-deploy-image:
    name: Build deploy image
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build-image-builder
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: ./deploy-image/build-image.sh
    - uses: actions/upload-artifact@v1
      with:
        name: deploy-image
        path: ./deploy-image/images/deploy-image

  build-libvirt:
    name: Build libvirt image
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build-image-builder
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: ./libvirt/build-image.sh
    - uses: actions/upload-artifact@v1
      with:
        name: libvirt
        path: ./libvirt/images/libvirt

  build-razor-server:
    name: Build razor-server image
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: build-image-builder
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - run: ./razor-server/build-image.sh
    - uses: actions/upload-artifact@v1
      with:
        name: razor-server
        path: ./razor-server/images/razor-server

  test-razor-server:
    name: Test razor-server
    timeout-minutes: 30
    runs-on: macos-latest
    needs: [build-razor-server, build-deploy-image, build-libvirt, build-ipxe]
    env:
      TARGET_DIR: './razor-server'
    steps:
    - uses: actions/checkout@v1
    - run: ./scripts/load_env.sh
    - uses: actions/download-artifact@v1
      with:
        name: razor-server
        path: ./razor-server/images/razor-server
    - uses: actions/download-artifact@v1
      with:
        name: deploy-image
        path: ./deploy-image/images/deploy-image
    - uses: actions/download-artifact@v1
      with:
        name: libvirt
        path: ./libvirt/images/libvirt
    - uses: actions/download-artifact@v1
      with:
        name: ipxe
        path: ./ipxe/output
    - run: brew install qemu cdrtools
    - run: ./razor-server/build-box.sh
    - run: ./razor-server/build-pxe-box.sh
    - working-directory: ${{ env.TARGET_DIR }}
      run: vagrant up
    - working-directory: ${{ env.TARGET_DIR }}
      run: vagrant up pxe
    - uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.6'
    - run: gem install razor-client:1.9.6

    - uses: actions/upload-artifact@v1
      if: ${{ always() }}
      with:
        name: test-razor-server-log
        path: ./log

  macos-info:
    name: Print macos vm information
    timeout-minutes: 5
    runs-on: macos-latest
    steps:
    - env:
        GITHUB: ${{ toJson(github) }}
        ENV: ${{ toJson(env) }}
        JOB: ${{ toJson(job) }}
        STEPS: ${{ toJson(steps) }}
        RUNNER: ${{ toJson(runner) }}
        SECRETS: ${{ toJson(secrets) }}
        STRATEGY: ${{ toJson(strategy) }}
        MATRIX: ${{ toJson(matrix) }}
      run: |
        env
    - uses: actions/checkout@v1
    - run: ls -la
    - run: ifconfig
    - run: VBoxManage list bridgedifs | grep ^Name

  # test-deploy-image:
  #   name: Test deploy image
  #   timeout-minutes: 10
  #   runs-on: macos-latest
  #   needs: [build-deploy-image, build-kubernetes]
  #   env:
  #     TARGET_DIR: './deploy-image'
  #   steps:
  #   - uses: actions/checkout@v1
  #   - run: chmod 0400 scripts/keys/id_rsa
  #   - run: ./scripts/load_env.sh
  #   - run: brew install qemu cdrtools hivemind hyperkit miniserve coreutils
  #   # Allow miniserve in the macos firewall
  #   - run: |
  #       APP=$(greadlink -f `which miniserve`)
  #       sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add $APP
  #       sudo /usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp $APP
  #   - uses: actions/setup-ruby@v1
  #     with:
  #       ruby-version: '2.6'

  #   - uses: actions/download-artifact@v1
  #     with:
  #       name: deploy-image
  #       path: ./deploy-image/images/deploy-image
  #   - uses: actions/download-artifact@v1
  #     with:
  #       name: kubernetes
  #       path: ./deploy-image/images/kubernetes

  #   - working-directory: ${{ env.TARGET_DIR }}
  #     run: gem install bundler:2.1.4

  #   - working-directory: ${{ env.TARGET_DIR }}
  #     run: bundle install

  #   - working-directory: ${{ env.TARGET_DIR }}
  #     run: bundle exec rspec

  # build-kubernetes:
  #   name: Build kubernetes image
  #   timeout-minutes: 10
  #   runs-on: ubuntu-latest
  #   needs: build-image-builder
  #   steps:
  #   - uses: actions/checkout@v1
  #   - run: ./scripts/load_env.sh
  #   - run: ./kubernetes/build-image.sh
  #   - uses: actions/upload-artifact@v1
  #     with:
  #       name: kubernetes
  #       path: ./kubernetes/images/kubernetes

  # test-kubernetes:
  #   name: Test kubernetes image
  #   timeout-minutes: 20
  #   runs-on: macos-latest
  #   needs: build-kubernetes
  #   steps:
  #   - uses: actions/checkout@v1
  #   - run: chmod 0400 scripts/keys/id_rsa
  #   - run: ./scripts/load_env.sh
  #   - run: brew install qemu cdrtools hivemind hyperkit ansible
  #   - uses: actions/download-artifact@v1
  #     with:
  #       name: kubernetes
  #       path: ./kubernetes/images/kubernetes
  #   - uses: actions/setup-ruby@v1
  #     with:
  #       ruby-version: '2.6'
  #   - run: gem install bundler:2.1.4
  #   - run: cd kubernetes && bundle install
  #   - run: |
  #       cd ./kubernetes
  #       hivemind Procfile.tests &
  #       bundle exec rspec
