# frozen_string_literal: true
# https://www.thomas-krenn.com/en/wiki/Network_Configuration_in_VirtualBox

require 'open3'

def image_dir(path)
  digest = `digest.sh #{path}`
  File.join(ENV.fetch('SETUP_ROOT_DIR'), digest).strip
end

TMP_DIR = ENV.fetch('SETUP_TMP_DIR')
log_dir = ENV.fetch('SETUP_LOG_DIR')
box_dir = ENV.fetch('SETUP_BOX_DIR')
deploy_image_image_dir = image_dir(File.join(ENV.fetch('SETUP_DEPLOY_IMAGE_DIR'), 'image.cfg'))
libvirt_image_dir = image_dir(File.join(ENV.fetch('SETUP_LIBVIRT_DIR'), 'image.cfg'))

ipxe_dir = ENV.fetch('SETUP_IPXE_DIR')
razor_server_dir = ENV.fetch('SETUP_RAZOR_SERVER_DIR')

dnsmasq_host_port = ENV.fetch('VAGRANT_BASTION_HOST_PORT')
ssh_private_key_path = File.join(razor_server_dir, 'keys', 'id_rsa')
ssh_proxy_command = "ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i #{ssh_private_key_path} -l vagrant -p #{dnsmasq_host_port} -W '[%h]:%p' 127.0.0.1"

bridge_interface = ENV.fetch('BRIDGE_INTERFACE')

def build_cloud_init_iso(iso_name, user_data_file, network_config_file)
  iso_location = File.join(TMP_DIR, iso_name)

  Dir.mktmpdir(nil, "/tmp") do |local_tmp_dir|
    user_data = File.join(local_tmp_dir, 'user-data')
    meta_data = File.join(local_tmp_dir, 'meta-data')
    network_config = File.join(local_tmp_dir, 'network-config')

    File.write(user_data, File.read(user_data_file))
    File.write(meta_data, "# Auto-Generated - DO NOT CHANGE THIS")
    File.write(network_config, File.read(network_config_file))

    stdout, stderr, status = Open3.capture3("mkisofs -output #{iso_location} -volid cidata -joliet -rock {#{user_data},#{meta_data},#{network_config}}")

    unless status.success?
      puts stdout
      puts stderr

      raise "Unable to create cloud-init iso '#{name}'"
    end
  end

  iso_location
end

Vagrant.configure('2') do |config|
  config.vm.synced_folder '.', '/vagrant', disabled: true

  config.vm.define "dnsmasq" do |dnsmasq|
    # Make sure the port is available, don't auto correct if not
    dnsmasq.vm.network "forwarded_port", guest: 22, host: dnsmasq_host_port, id: 'ssh', auto_correct: false
    dnsmasq.vm.network "private_network", auto_config: false, adapter: 2, virtualbox__intnet: true
    dnsmasq.vm.box = "file://#{File.join(box_dir, 'dnsmasq_buster.box')}"
    dnsmasq.ssh.private_key_path = ssh_private_key_path

    dnsmasq.vm.provider 'virtualbox' do |vb|
      vb.gui = false
      vb.memory = "1024"

      # Setup the serial port for logging
      vb.customize ["modifyvm", :id, "--uartmode1", "file", File.join(log_dir, "dnsmasq_buster.log")]

      dnsmasq_cloud_init = build_cloud_init_iso(
        "dnsmasq-cloud-init.iso",
        File.join(razor_server_dir, "cloud-init/dnsmasq-user-data.yml"),
        File.join(razor_server_dir, "cloud-init/dnsmasq-network-config.yml"),
      )
      vb.customize ["storageattach", :id, "--storagectl", "IDE Controller", "--port", "0", "--device", "0", "--type", "dvddrive", "--medium", dnsmasq_cloud_init]
    end
  end

  config.vm.define "razor-server", primary: true do |razor|
    razor.vm.network "private_network", auto_config: false, virtualbox__intnet: true, adapter: 1
    razor.vm.network "public_network", auto_config: false, bridge: bridge_interface
    razor.vm.box = "file://#{File.join(box_dir, "razor-server_buster.box")}"

    # Using the dnsmasq machine as a jumphost to communicate to pxe machine
    # This means that we're first connecting to the dnsmasq machine with SSH
    # and afterwards through that connection connect to the pxe machine.
    razor.ssh.private_key_path = ssh_private_key_path
    razor.ssh.proxy_command = ssh_proxy_command
    razor.ssh.host = 'razor-server'
    razor.ssh.port = 22

    razor.vm.synced_folder deploy_image_image_dir, "/repo/deploy-image/deploy-image"
    razor.vm.synced_folder libvirt_image_dir, "/repo/deploy-image/libvirt"
    razor.vm.synced_folder File.join(razor_server_dir, "elements/razor-server/static/tasks/deploy-image.task"), "/tasks/deploy-image.task"
    razor.vm.synced_folder File.join(ipxe_dir, "output"), "/tftpboot/ipxe"
    razor.vm.synced_folder File.join(razor_server_dir, "cloud-init"), "/repo/deploy-image/cloud-init"

    razor.vm.provider 'virtualbox' do |vb|
      vb.gui = false
      vb.memory = "1024"
      # Setup log file
      vb.customize ["modifyvm", :id, "--uartmode1", "file", File.join(log_dir, "razor-server_buster.log")]

      razor_cloud_init = build_cloud_init_iso(
        "razor-cloud-init.iso",
        File.join(razor_server_dir, "cloud-init/razor-user-data.yml"),
        File.join(razor_server_dir, "cloud-init/razor-network-config.yml"),
      )
      vb.customize ["storageattach", :id, "--storagectl", "IDE Controller", "--port", "0", "--device", "0", "--type", "dvddrive", "--medium", razor_cloud_init]
    end
  end

  config.vm.define "pxe" do |pxe|
    # Hardcoding the mac address of the adapter and sending it to the razor client
    # makes sure the node is registered correctly and immediately starts provisioning
    bridge_mac = '08:00:27:cf:12:58'
    vbox_bridge_mac = bridge_mac.split(':').join

    # Setting adapter: 1 here makes sure the default Vagrant adapter is overwritten
    # This is done, otherwise the microkernel has multiple nameservers in the /etc/resolv.conf
    # 1 of the host-only network and 1 of the internal dnsmasq network
    # If the nameserver of the host-only network is used then the DNS "razor-server" does not resolve
    pxe.vm.network "private_network", mac: vbox_bridge_mac, virtualbox__intnet: true, adapter: 1, auto_config: false
    pxe.vm.box = "file://#{File.join(razor_server_dir, "pxe.box")}"

    # Set the boot_timeout to 600 seconds (10 minutes) as it can take a long
    # to provision and boot the vm
    pxe.vm.boot_timeout = 600

    # Using the dnsmasq machine as a jumphost to communicate to pxe machine
    # This means that we're first connecting to the dnsmasq machine with SSH
    # and afterwards through that connection connect to the pxe machine.
    # the hostname of the deployed machine will be "libvirt"
    pxe.ssh.private_key_path = ssh_private_key_path
    pxe.ssh.proxy_command = ssh_proxy_command
    pxe.ssh.host = 'libvirt'
    pxe.ssh.port = 22

    pxe.trigger.before :up do |t|
      t.info = "Registring PXE machine with razor-server"
      t.run = { inline: "./razor-register-pxe.sh '#{bridge_mac}'" }
    end

    pxe.vm.provider 'virtualbox' do |vb|
      vb.gui = false

      # We need a lot of memory here because a disk is downloaded and extracted into ram
      vb.memory = "4096"

      # Setup the serial port for logging
      vb.customize ["modifyvm", :id, "--uartmode1", "file", File.join(log_dir, "pxe.log")]

      # Attach iPXE to the Floppy controller to enable network booting
      vb.customize ["storageattach", :id, "--storagectl", "Floppy", "--port", 0, "--device", 0, "--type", "fdd", "--medium", File.join(ipxe_dir, "output/ipxe.dsk")]
    end
  end
end
