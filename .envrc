export GITHUB_DOCKER_REGISTRY_URL=docker.pkg.github.com/mvgijssel/setup
export DOCKER_REGISTRY_URL="${GITHUB_DOCKER_REGISTRY_URL}"
export BASE_IMAGE=base-image
export IMAGE_BUILDER_IMAGE=image-builder
export RAZOR_SERVER_IMAGE=razor-server
export IPXE_IMAGE=ipxe

export VAGRANT_BASTION_HOST_PORT=2222

# Only if the CI variable does not exist
# If NOT on the CI, executing on local machine
if [ -z "${CI+x}" ]; then
  export CI=false
fi

export CI_SEMAPHORE=false
export CI_GITHUB=false

if [[ "${CI}" = true ]]; then
  export CI=true

  # If NOT semaphore ci use the Github ref
  if [ -z "${SEMAPHORE_GIT_REF+x}" ]; then
      export GIT_REF="${GITHUB_REF}"
      export CI_GITHUB=true
  else
      export GIT_REF="${SEMAPHORE_GIT_REF}"
      export CI_SEMAPHORE=true
  fi

  export BRIDGE_INTERFACE="en0: Ethernet"
  export GOPATH="$HOME/go"

  export TF_CLI_ARGS="-var-file=ci.tfvars -input=false"
else
  export CI=false

  # Only set the GITHUB REF locally (not in the CI)
  export GIT_REF="refs/heads/$(git rev-parse --abbrev-ref HEAD)"

  # Setting for diskimage-builder, will trigger a bash repl when there is an error
  export break=after-error

  export BRIDGE_INTERFACE="en0: Wi-Fi (Wireless)"

  export TF_CLI_ARGS="-var-file=local.tfvars -input=false"
fi

export DOCKER_BUILDKIT=0

# export IP_ADDRESS=$(ipconfig getifaddr en0)

export SETUP_ROOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
export SETUP_SCRIPTS_DIR="${SETUP_ROOT_DIR}/scripts"
export SETUP_LOG_DIR="${SETUP_ROOT_DIR}/log"
export SETUP_IMAGE_DIR="${SETUP_ROOT_DIR}/image"
export SETUP_IPXE_DIR="${SETUP_ROOT_DIR}/ipxe"
export SETUP_TMP_DIR="${SETUP_ROOT_DIR}/tmp"
export SETUP_KUBERNETES_DIR="${SETUP_ROOT_DIR}/kubernetes"
export SETUP_UNIFI_DIR="${SETUP_ROOT_DIR}/unifi"
export SETUP_RAZOR_SERVER_DIR="${SETUP_ROOT_DIR}/razor-server"
export SETUP_DEPLOY_IMAGE_DIR="${SETUP_ROOT_DIR}/deploy-image"
export SETUP_IMAGE_BUILDER_DIR="${SETUP_ROOT_DIR}/image-builder"
export SETUP_ELEMENTS_DIR="${SETUP_ROOT_DIR}/elements"
export SETUP_LIBVIRT_DIR="${SETUP_ROOT_DIR}/libvirt"
export SETUP_DNSMASQ_DIR="${SETUP_ROOT_DIR}/dnsmasq"

export TF_VAR_setup_kubernetes_dir="${SETUP_KUBERNETES_DIR}"
export TF_VAR_setup_root_dir="${SETUP_ROOT_DIR}"

export PATH="${SETUP_SCRIPTS_DIR}:${PATH}"
