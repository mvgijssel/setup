# frozen_string_literal: true

# https://www.thomas-krenn.com/en/wiki/Network_Configuration_in_VirtualBox

require 'open3'

TMP_DIR = ENV.fetch('SETUP_TMP_DIR')
log_dir = ENV.fetch('SETUP_LOG_DIR')
root_dir = ENV.fetch('SETUP_ROOT_DIR')
secrets_dir = ENV.fetch('SETUP_SECRETS_DIR')
libvirt_dir = ENV.fetch('SETUP_LIBVIRT_DIR')
local_network_bridge_interface = ENV.fetch('LOCAL_NETWORK_BRIDGE_INTERFACE')
libvirt_fqdn = ENV.fetch('LIBVIRT_FQDN')
image_info = JSON.parse(`image_info.sh ./image.cfg`)
libvirt_box_path = image_info.fetch('absolute_box_path')

def build_cloud_init_iso(iso_name, user_data_file, network_config_file, hostname)
  iso_location = File.join(TMP_DIR, iso_name)

  Dir.mktmpdir(nil, "/tmp") do |local_tmp_dir|
    user_data = File.join(local_tmp_dir, 'user-data')
    meta_data = File.join(local_tmp_dir, 'meta-data')
    network_config = File.join(local_tmp_dir, 'network-config')

    File.write(user_data, File.read(user_data_file))
    File.write(meta_data, "local-hostname: #{hostname}")
    File.write(network_config, File.read(network_config_file))

    stdout, stderr, status = Open3.capture3("mkisofs -output #{iso_location} -volid cidata -joliet -rock {#{user_data},#{meta_data},#{network_config}}")

    unless status.success?
      puts stdout
      puts stderr

      raise "Unable to create cloud-init iso '#{name}'"
    end
  end

  iso_location
end

Vagrant.configure('2') do |config|
  config.vm.define "libvirt" do |libvirt|
    libvirt.vm.network "public_network", adapter: 1, auto_config: false, bridge: local_network_bridge_interface
    libvirt.vm.box = "file://#{libvirt_box_path}"
    libvirt.vm.synced_folder '.', '/vagrant', disabled: true
    libvirt.vm.synced_folder log_dir, "/data/vms/logs", mount_options: ["dmode=755,fmode=744"]
    libvirt.vm.synced_folder root_dir, "/home/vagrant/setup", mount_options: ["dmode=755,fmode=744"]
    libvirt.vm.synced_folder secrets_dir, "/home/vagrant/setup/secrets", mount_options: ["dmode=755,fmode=0600"]
    libvirt.ssh.host = libvirt_fqdn

    libvirt.vm.provider 'virtualbox' do |vb|
      vb.gui = false
      vb.memory = "4096"
      vb.cpus = 2

      # Enable promiscious mode on the network adapter to enable bridge networking in the vm
      vb.customize ["modifyvm", :id, "--nicpromisc1", "allow-all"]

      # Setup log file
      vb.customize ["modifyvm", :id, "--uartmode1", "file", File.join(log_dir, "libvirt.log")]

      libvirt_cloud_init = build_cloud_init_iso(
        "libvirt-cloud-init.iso",
        File.join(libvirt_dir, "cloud-init/libvirt-user-data.yml"),
        File.join(libvirt_dir, "cloud-init/libvirt-network-config.yml"),
        libvirt_fqdn,
      )
      vb.customize ["storageattach", :id, "--storagectl", "IDE Controller", "--port", "0", "--device", "0", "--type", "dvddrive", "--medium", libvirt_cloud_init]
    end
  end
end
